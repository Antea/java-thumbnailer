<?xml version="1.0"?>
<!--
 | JavaThumbnailer - A pluggable Java Thumbnail Generator Library
 | Copyright (C) 2011 Come_IN Computerclubs (University of Siegen)
 |
 | This library is free software; you can redistribute it and/or
 | modify it under the terms of the GNU Lesser General Public
 | License as published by the Free Software Foundation; either
 | version 2.1 of the License, or (at your option) any later version.
 |
 | This library is distributed in the hope that it will be useful,
 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 | Lesser General Public License for more details.
 |
 | You should have received a copy of the GNU Lesser General Public
 | License along with this library; if not, write to the Free Software
 | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 |
 | Contact: Come_IN-Team <come_in-team@listserv.uni-siegen.de>
 +-->
<project name="javathumbnailer" default="targets" basedir=".">

  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="lib/ant/xmltask.jar" />
  
  <!--
   | The properties and paths
   +-->
  <property file="build.properties"/>
  <property environment="env"/>
  <!-- set if java.dir not set in build.properties -->
  <property name="java.dir" value="${env.JAVA_HOME}" />
  <condition property="java_dir_empty">
  	<or>
  		<length string="${java.dir}" length="0" />
  		<equals arg1="${java.dir}" arg2="$${env.JAVA_HOME}" />
  		<not>
  		  <isset property="java.dir" />
  		</not>
  	</or>
  </condition>
  <tstamp>
    <format property="timestamp" pattern="yyMMdd-HHmm"/>
  </tstamp>
  <condition property="version" value="${version.prefix}-PREVIEW">
    <istrue value="${is-preview}"/>
  </condition>
  <condition property="version" value="${version.prefix}-STABLE">
    <isfalse value="${is-preview}"/>
  </condition>
  <property name="version.file" value="${version}"/>
  <property name="programname" value="Java Thumbnailer"/>
  <property name="programname.file" value="javathumbnailer"/>
  <property name="doc.header" value="${programname} ${version} API"/>
  <property name="doc.title" value="API documentation for ${programname} ${version}"/>
  <property name="doc.bottom" value="${programname} ${version}, Copyright (C) 2011 Come_IN Computerclubs (University of Siegen)"/>
  
  <property name="test.reports" value="build/tests" />
  <property name="reportStorage" value="test/reports" />

  <property name="package.file" value="${programname.file}-standalone-${version.file}.jar"/>
  <property name="pluginname.file" value="${programname.file}-crawlerplugin-${version.file}.jar"/>
  <property name="pluginname-taglib.file" value="${programname.file}-plugin-taglib-${version.file}.jar"/>

  <!-- Autodetect the platform -->
  <condition property="platform" value="linux">
    <os family="unix"/>
  </condition>
  <condition property="platform" value="win">
    <os family="windows"/>
  </condition>

  <path id="sourcepath">
    <pathelement location="src"/>
  </path>
  <path id="sourcepath-plugin">
    <pathelement location="plugin/src"/>
  </path>

  <path id="classpath" cache="true">
    <pathelement location="build/classes"/>
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="lib/jodconverter3">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="lib/xuggler">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="lib/shared-with-regain-preperators">
      <include name="*.jar"/>
    </fileset>
  </path>
  <path id="classpath-regain" cache="true">
  	<pathelement location="${regain-location}/build/classes"/>
  	<pathelement location="${regain-location}/build/included-lib-classes/common"/>
  </path>
  <path id="classpath-shared" cache="true">
    <fileset dir="lib/shared-with-regain">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="junit" cache="true">
    <fileset dir="lib/ant">
      <include name="junit-4.8.1.jar"/>
    </fileset>
  </path>
  
  <path id="test-classpath" cache="true">
    <fileset dir="test/lib">
      <include name="*.jar" />
    </fileset>
    <pathelement location="build/classes-test"/>
  </path>

  <path id="docpath">
    <path refid="sourcepath"/>
  </path>



  <!--
   | Display all public targets
   +-->
  <target name="targets">
    <echo message="usage: build [target]"/>
    <echo message=""/>
    <echo message="available targets:"/>
    <echo message="  targets              Shows this list of targets."/>
    <echo message="  dump-info            Dumps some information (VM-Version...)."/>
    <echo message="  clean                Deletes the classes directory."/>
    <echo message="  clean-all            Deletes all generated directories."/>

    <echo message="  prepare              Prepares the compilation. (Extracts the libs)"/>
    <echo message="  prepare-once         Prepares the compilation if needed. (Extracts the libs)"/>

    <echo message="  doc                  Generates the JavaDoc documentation."/>

    <echo message="  make                 Compiles the source code."/>
    <echo message="  make-plugin          Compiles the source code of the crawler plugin."/>
    <echo message="                       (and the regain project, if needed)"/>

    <echo message="  make-test            Compiles the test source code."/>
    <echo message="  test                 Does the JUnit tests."/>
    <echo message="  test-integration     Does the integration tests."/>
    <echo message="  test-overview        Does the JUnit tests and give a quick overview."/>
    <echo message="  test-generate-history Generates a test history from existing Unit-reports."/>

    <echo message="  package              Packages the thumbnailer lib as standalone library." />
    <echo message="                       (including dependencies)"/>
    <echo message="  package-plugin       Packages the lib as regain plugin." />
    <echo message="                       (including depencies except those that exist in regain)"/>
    <echo message="  all                  Creates all."/>
    <echo message="  public               Public release."/>
  </target>


  <!--
   | Dump some information.
   +-->
  <target name="dump-info">
    <echo message="java.dir=${java.dir}" />
    <echo message="JAVA_HOME=${env.JAVA_HOME}" />
    <echo message="java.vm.info=${java.vm.info}" />
    <echo message="java.vm.name=${java.vm.name}" />
    <echo message="java.vm.vendor=${java.vm.vendor}" />
    <echo message="java.vm.version=${java.vm.version}" />
    <echo message="os.arch=${os.arch}" />
    <echo message="os.name=${os.name}" />
    <echo message="os.version=${os.version}" />
    <echo message="file.encoding=${file.encoding}" />
    <echo message="user.language=${user.language}" />
  </target>


  <!--
   | Deletes the classes directory.
   +-->
  <target name="clean">
    <delete dir="build/classes"/>
    <delete dir="build/classes-test"/>
  </target>

  <!--
   | Deletes all generated directories.
   +-->
  <target name="clean-all" depends="clean">
    <delete dir="build/included-lib-classes"/>
    <delete dir="build/doc"/>
    <delete dir="build/tests"/>
  </target>

  <!--
   | Prepares the compilation. (Extracts the libs)
   +-->
  <target name="prepare">
    <echo message="Extracting the lib jars ..." />
    <delete dir="build/included-lib-classes"/>
    <mkdir dir="build/included-lib-classes/common"/>
    <unjar dest="build/included-lib-classes/">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/jodconverter3">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/shared-with-regain-preperators">
        <include name="*.jar"/>
      </fileset>
    </unjar>
    <unjar dest="build/included-lib-classes-shared/">
      <fileset dir="lib/shared-with-regain">
        <include name="*.jar"/>
      </fileset>
    </unjar>
  </target>


  <!--
   | Prepares the compilation. (Extracts the libs)
   | Does nothing if the libs were already extracted.
   +-->
  <target name="prepare-once" depends="-check-prepare, -prepare-if-needed"/>
  
  <target name="-check-prepare">
    <condition property="included-lib-classes.missing">
      <not>
        <available file="build/included-lib-classes" type="dir"/>
      </not>
    </condition>
  </target>
  
  <target name="-prepare-if-needed" if="included-lib-classes.missing">
    <antcall target="prepare"/>
  </target>


  <!--
   | Generates the JavaDoc documentation.
   +-->
  <target name="doc">
    <echo message="Generating JavaDoc documentation ..." />
    <delete dir="build/doc"/>
    <mkdir dir="build/doc/javadoc"/>
    <javadoc packagenames="*"
             sourcepathref="docpath"
             classpathref="classpath"
             destdir="build/doc/javadoc"
             doctitle="${doc.title}"
             windowtitle="${doc.title}"
             header="${doc.header}"
             bottom="${doc.bottom}"
             stylesheetfile="ressources/stylesheet.css"
             access="private"
             charset="UTF-8"
             failonerror="true">
             <!-- additionalparam="-breakiterator" -->
      <link offline="true"
            href="${java-api-location}"
            packagelistLoc="ressources/dummy-jdk-api-doc"/>
    </javadoc>
  </target>



  <!--
   | Compiles the source code.
   +-->
  <target name="make">
    <echo message="Compiling the source code using ${java.dir} ..." />
    <fail if="java_dir_empty">
  		Neither 'java.dir' nor JAVA_HOME is set, so no compiling is possible. Please copy build.properties.sample to build.properties and edit its values.
  	</fail>
    <mkdir dir="build/classes"/>
    <javac destdir="build/classes"
           debug="${debug}"
           deprecation="true"
           executable="${java.dir}/bin/javac"
           source="1.5"
           target="1.5"
           fork="true"
           includeantruntime="false">
      <compilerarg value="-Xlint"/>
      <src>
        <path refid="sourcepath"/>
      </src>
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
      </classpath>
    </javac>
  </target>

  <target name="make-plugin" depends="make">
  	<echo message="Making sure everything is prepared at regain ..." />
  	<ant dir="${regain-location}" useNativeBasedir="true" inheritAll="false">
  		<target name="prepare-once"/>
  		<target name="make"/>
  	</ant>
  	<echo message="Compiling regain plugin ... (Regain is in ${regain-location})" />
  	<fail if="java_dir_empty">
  		Neither 'java.dir' nor JAVA_HOME is set, so no compiling is possible. Please copy build.properties.sample to build.properties and edit its values.
  	</fail>
  	<javac destdir="build/classes"
           debug="${debug}"
           deprecation="true"
           executable="${java.dir}/bin/javac"
           source="1.5"
           target="1.5"
           fork="true"
           includeantruntime="false">
      <compilerarg value="-Xlint"/>
      <src>
        <path refid="sourcepath-plugin"/>
      </src>
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
        <path refid="classpath-regain"/>
      </classpath>
    </javac>
  </target>

  <!--
   | Compiles the test source code.
   +-->
  <target name="make-test" depends="make">
    <echo message="Compiling the test source code ..." />
    <mkdir dir="build/classes-test"/>
    <javac destdir="build/classes-test"
           debug="true"
           deprecation="true"
           target="1.5"
           includeantruntime="false">
      <src>
        <pathelement location="test/src"/>
      </src>
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
        <path refid="junit"/>
        <path refid="test-classpath"/>
      </classpath>
    </javac>
  </target>

  <!--
   | Package the thumbnailer as a standalone .jar-library/executable
   +-->
  <target name="package" depends="prepare-once, make">
    <echo message="Creating standalone jar ..." />
    <fileset id="ressources" dir="ressources">
    </fileset>
    <fileset id="lib-jars" dir="build/included-lib-classes">
    </fileset>
    <fileset id="lib-jars-shared" dir="build/included-lib-classes-shared">
    </fileset>
    <fileset id="classes" dir="build/classes">
      <exclude name="de/uni_siegen/wineme/come_in/thumbnailer/plugin/ThumbnailerPlugin*"/>
    </fileset>    
    
    <jar jarfile="build/${package.file}"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="de.uni_siegen.wineme.come_in.thumbnailer.Main"/>
      </manifest>
      <fileset refid="lib-jars"/>
      <fileset refid="classes"/>
      <fileset refid="lib-jars-shared"/>
      <fileset refid="ressources" />
    </jar>
    
    <zip destfile="build/${programname.file}-standalone-${version.file}.zip" whenempty="fail">
      <zipfileset prefix="${programname.file}" dir="build" includes="${package.file}" />
      <zipfileset prefix="${programname.file}" dir=".">
        <include name="CHANGELOG" />
        <include name="INSTALL" />
        <include name="README.md" />
        <include name="LICENSE.TXT" />
      </zipfileset>
    </zip>
    
  </target>
  
  <!--
   | Packages the thumbnailer as a plugin for regain
   +-->
  <target name="package-plugin" depends="prepare-once, make-plugin">
    <echo message="Creating regain jar ..." />
    <fileset id="lib-jars" dir="build/included-lib-classes">
    </fileset>
    <fileset id="ressources" dir="ressources">
    </fileset>
    <fileset id="classes" dir="build/classes">
    </fileset>
    
    <jar jarfile="build/${pluginname.file}"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="de.uni_siegen.wineme.come_in.thumbnailer.Main"/>
        <attribute name="Plugin-Class" value="de.uni_siegen.wineme.come_in.thumbnailer.plugin.ThumbnailerPlugin"/>
      </manifest>
      <fileset refid="lib-jars"/>
      <fileset refid="classes"/>
      <fileset refid="ressources" />
    </jar>
    
    <echo message="Creating regain jar taglib ..." />
    <jar jarfile="build/${pluginname-taglib.file}"
         compress="false"
         index="true">
     <fileset dir="build/classes">
       <include name="de/uni_siegen/wineme/come_in/thumbnailer/plugin/**" />
     </fileset>
     <fileset dir="build/classes">
       <include name="de/uni_siegen/wineme/come_in/thumbnailer/ThumbnailerConstants.class" />
     </fileset>
    </jar>
    
    <zip destfile="build/${programname.file}-plugin-${version.file}.zip" whenempty="fail">
      <zipfileset prefix="${programname.file}" dir="build" includes="${pluginname.file}" />
      <zipfileset fullpath="${programname.file}/web/taglib/thumbnailer.jar" dir="build" includes="${pluginname-taglib.file}"  />
      <zipfileset prefix="${programname.file}/web" dir="web">
        <exclude name="**/_*" />
      </zipfileset>
      <zipfileset prefix="${programname.file}" dir=".">
        <include name="CHANGELOG" />
        <include name="INSTALL" />
        <include name="README.md" />
        <include name="LICENSE.TXT" />
      </zipfileset>
    </zip>
  </target>
  

  <!--
   | Does the JUnit tests.
   |
   | If this target does not work, copy the file "junit-xxx.jar" from the directory
   | "lib/ant" in your ANT_HOME/lib directory.
   | (ANT_HOME/lib is on my machine "/usr/share/ant/lib" or "~/.ant/lib")
   +-->
  <target name="test" depends="make-test">
    <junit haltonfailure="false" fork="true" filtertrace="on" > <!-- showoutput="true" -->
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
        <path refid="junit"/>
      </classpath>
      <formatter type="plain" usefile="false"/>
      <batchtest>
        <fileset dir="test/src">
	  	  <include name="de/**/*Test.java" />
	  	  <exclude name="**/slow/*Test.java" /> <!-- Sorry, these tests currently don't work with ant. Run them inside Eclipse, for example. -->
	  	  <exclude name="**/integration/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
   | Does the JUnit tests.
   |
   | If this target does not work, copy the file "junit-xxx.jar" from the directory
   | "lib/ant" in your ANT_HOME/lib directory.
   | (ANT_HOME/lib is on my machine "/usr/share/ant/lib" or "~/.ant/lib")
   +-->
  <target name="test-integration" depends="make-test">
  	<copy file="build/${package.file}" preservelastmodified="true" tofile="test/build/javathumbnailer-standalone.jar" />
  
    <junit haltonfailure="true" fork="true" filtertrace="on" > <!-- showoutput="true" -->
      <classpath>
        <path refid="junit"/>
        <path refid="test-classpath" />
        <path location="test/build/javathumbnailer-standalone.jar" /> <!-- TODO: Remove depencies in test -->
      </classpath>
      <formatter type="plain" usefile="false"/>
      <batchtest>
        <fileset dir="test/src">
	  	  <include name="**/integration/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
   | Does the JUnit tests and show an overview.
   | Number of failed tests are logged to build/tests.
   | These can be used to generate a nice report with test-generate-history
   |
   | If this target does not work, copy the file "junit-xxx.jar" from the directory
   | "lib/ant" in your ANT_HOME/lib directory.
   | (ANT_HOME/lib is on my machine "/usr/share/ant/lib" or "~/.ant/lib")
   +-->  
  <target name="test-overview" depends="make-test">
  	<delete dir="${test.reports}"/>
  	<mkdir dir="${test.reports}" />
    <junit haltonfailure="false" fork="true" filtertrace="on" > <!-- showoutput="true" -->
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
        <path refid="junit"/>
      </classpath>
      <formatter type="xml" usefile="true"/>
      <batchtest todir="${test.reports}">
        <fileset dir="test/src">
	  	  <include name="de/**/*Test.java" />
	  	  <exclude name="**/slow/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${test.reports}">
      <fileset dir="${test.reports}">
        <include name="TEST-*.xml" />
      </fileset>
      <report todir="${test.reports}" />
    </junitreport>
    
    <tstamp>
      <format property="start.timestamp" pattern="yyyyMMdd-HHmmss" />
    </tstamp>
    <copy todir="${reportStorage}/report-${start.timestamp}">
      <fileset dir="build/tests" />
    </copy>
  </target>
  
  <target name="test-generate-history" description="Generates a test history from existing Unit-reports.">
      <apply executable="java" dir="." force="true" parallel="true">
     	<arg value="-jar" />
     	<arg value="lib/ant/unitth-1.3.1.jar" />
     	<dirset dir="${reportStorage}">
     		<include name="report-*" />
     	</dirset>

     </apply>
  </target>
    

  <!--
   | Creates all.
   +-->
  <target name="all" depends="package, package-plugin">
  </target>

  <!--
   | Build release.
   | (Todo: throw warning when ${is-preview}==false)
   +-->
   <target name="public" depends="clean-all, prepare, make, test-overview, package, package-plugin">
   </target>
   
   <!--
    | Deploy crawler related changes 
    | Params:
    ${install} - Path to main folder
    ${install-conf} - Path to conf folder
   -->
   <target name="-deploy-crawler">
   	  <available property="install.available" file="${install-conf}/CrawlerConfiguration.xml" />
   	  <fail unless="install.available" message="Regain is not yet compiled / ${install-conf}/CrawlerConfiguration.xml is missing." />
   	  
	  <echo message="Copy Crawler plugin..." />
   	  <delete quiet="true">
   	  	<fileset dir="${install}/plugins" includes="javathumbnailer-crawlerplugin-*.jar"/>
   	  </delete>
   	  <copy file="build/${pluginname.file}" preservelastmodified="true" todir="${install}/plugins" />
   	  
   	  <echo message="Add to CrawlerConfiguration.xml..." />
   	  <xmltask source="${install-conf}/CrawlerConfiguration.xml" dest="${install-conf}/CrawlerConfiguration.xml">
 		<call path="configuration/crawlerPluginList/crawlerPlugin/class">
 			<param name="class" path="text()" default="none" />
 			<actions>
 				<condition property="thumbnailer-present">
 					<equals arg1="@{class}" arg2="de.uni_siegen.wineme.come_in.thumbnailer.plugin.ThumbnailerPlugin" />
 				</condition>
 				<!-- <echo> Found crawler plugin config: @{class}</echo> -->
 			</actions>
 		</call>
   	  	<insert path="configuration/crawlerPluginList" unless="thumbnailer-present">
   	  	 <![CDATA[
	<crawlerPlugin enabled="true">
  	  <class>de.uni_siegen.wineme.come_in.thumbnailer.plugin.ThumbnailerPlugin</class>
  	  <config>
  	    <section name="thumbnailing">
   	      <param name="thumbnailFolder">web/thumbs/</param>
  	      <param name="imageWidth">160</param>
  	      <param name="imageHeight">120</param>
  	    </section>
  	  </config>
  	</crawlerPlugin>
  	   	  	 ]]>
   	  	</insert>	
	  </xmltask>
	  
	  <antcall target="-clean-index">
	  	<param name="index" value="${install}/searchindex" />
	  	<param name="unless-cond" value="thumbnailer-present" />
	  </antcall>
   </target>
   
   <target name="-clean-index" unless="unless-cond">
   	  <echo message="Delete searchindex to force re-indexing." />
	  <delete failonerror="false" dir="${index}" />
   </target>
   
   
   <!--
    | Deploy search related changes 
    | Params:
    ${install} - Path to main folder
    ${install-conf} - Path to conf folder
   -->
   <target name="-deploy-search">
   	  <available property="install.available" file="${install-web}/index.jsp" />
   	  <fail unless="install.available" message="Regain is not yet compiled / ${install-web}/index.jsp is missing." />
   	  <echo message="Copy Taglib..." />
   	  
   	  <copy preservelastmodified="true" todir="${install-web}">
   	  	<fileset dir="web" />
   	  </copy>
   	  
   	  <copy file="build/${pluginname-taglib.file}" preservelastmodified="true" tofile="${install-web}/taglib/thumbnailer.jar" />
   </target>
   <!-- 
    | Install to regain desktop version 
   -->
   <target name="deploy-desktop"> <!-- depends="package-plugin" -->
      <echo message="Deploying desktop version changes ..." /> 
   	  <property name="desktop-install" value="${regain-location}/build/runtime/desktop/${platform}" />
   	  <available property="conf.available" file="${desktop-install}/conf/DesktopConfiguration.xml" />
   	  <copy todir="${desktop-install}/conf" overwrite="false" granularity="5256000000">
   	  	<fileset dir="${desktop-install}/conf/default" />   	  
   	  </copy>

   	  <antcall target="-deploy-crawler">
   	  	<param name="install" value="${desktop-install}" />
   	  	<param name="install-conf" value="${desktop-install}/conf" />
   	  </antcall>
   	  <antcall target="-deploy-search">
   	  	<param name="install-web" value="${desktop-install}/web" />   	  
   	  </antcall>
   	     	  
	  <echo message="Add to DesktopConfiguration.xml..." />   	  
   	  <xmltask source="${desktop-install}/conf/DesktopConfiguration.xml" dest="${desktop-install}/conf/DesktopConfiguration.xml">
   		<remove path="configuration/simple_register_namespace/namespace[@name='thumbnailer']" />
   	  	<insert path="configuration/simple_register_namespace">
   	  	 <![CDATA[
   	  	 	<namespace name="thumbnailer">de.uni_siegen.wineme.come_in.thumbnailer.plugin.sharedlib</namespace>
   	  	 ]]>
   	  	</insert>
   	  </xmltask>
   </target>
   
   <target name="deploy-crawler">
     <echo message="Deploying server version changes (Crawler) ..." />
      
   	 <property name="crawler-install" value="${regain-location}/build/runtime/crawler" />
      <antcall target="-deploy-crawler">
   	  	<param name="install" value="${crawler-install}" />
   	  	<param name="install-conf" value="${crawler-install}" />
   	  </antcall>
   	  <echo message="You may need to adjust the thumbnail Folder so that it is /thumbs/ inside the tomcat/regain app-folder." />
   	
   </target>
   
   <target name="deploy-tomcat">
      <echo message="Deploying server version changes (Search) ..." />
      <property name="tomcat-install" value="${deploy-target.dir}/regain" />
   	  <antcall target="-deploy-search">
   	  	<param name="install-web" value="${tomcat-install}" />   	  
   	  </antcall>
   	  <copy file="${tomcat-install}/taglib/thumbnailer.jar" preservelastmodified="true" todir="${tomcat-install}/WEB-INF/lib" />
   	  
   	  <echo message="You may need to restart tomcat in order to see the changes." />
   </target>   
   
   <target name="deploy-server" depends="deploy-crawler, deploy-tomcat">
   </target>
</project>
