<?xml version="1.0"?>
<!--
 | JavaThumbnailer - A pluggable Java Thumbnail Generator Library
 | Copyright (C) 2011 Come_IN Computerclubs (University of Siegen)
 |
 | This library is free software; you can redistribute it and/or
 | modify it under the terms of the GNU Lesser General Public
 | License as published by the Free Software Foundation; either
 | version 2.1 of the License, or (at your option) any later version.
 |
 | This library is distributed in the hope that it will be useful,
 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 | Lesser General Public License for more details.
 |
 | You should have received a copy of the GNU Lesser General Public
 | License along with this library; if not, write to the Free Software
 | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 |
 | Contact: Come_IN-Team <come_in-team@listserv.uni-siegen.de>
 +-->
<project name="javathumbnailer" default="targets" basedir=".">

  <!--
   | The properties and paths
   +-->
  <property file="build.properties"/>
  <property environment="env"/>
  <tstamp>
    <format property="timestamp" pattern="yyMMdd-HHmm"/>
  </tstamp>
  <condition property="version" value="${version.prefix}-PREVIEW">
    <istrue value="${is-preview}"/>
  </condition>
  <condition property="version" value="${version.prefix}-STABLE">
    <isfalse value="${is-preview}"/>
  </condition>
  <property name="version.file" value="${version}"/>
  <property name="programname" value="Java Thumbnailer"/>
  <property name="programname.file" value="javathumbnailer"/>
  <property name="doc.header" value="${programname} ${version} API"/>
  <property name="doc.title" value="API documentation for ${programname} ${version}"/>
  <property name="doc.bottom" value="${programname} ${version}, Copyright (C) 2011 Come_IN Computerclubs (University of Siegen)"/>

  <!-- Autodetect the platform
  <condition property="platform" value="linux">
    <os family="unix"/>
  </condition>
  <condition property="platform" value="win">
    <os family="windows"/>
  </condition>
   -->
   
  <path id="sourcepath">
    <pathelement location="src"/>
  </path>
  <path id="sourcepath-plugin">
    <pathelement location="plugin/src"/>
  </path>

  <path id="classpath" cache="true">
    <pathelement location="build/classes"/>
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="lib/jodconverter3">
      <include name="*.jar"/>
    </fileset>
  </path>
  <path id="classpath-regain" cache="true">
  	<pathelement location="${regain-location}/build/classes"/>
  	<pathelement location="${regain-location}/build/included-lib-classes/common"/>
  </path>
  <path id="classpath-shared" cache="true">
    <fileset dir="lib/shared-with-regain">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="docpath">
    <path refid="sourcepath"/>
  </path>



  <!--
   | Display all public targets
   +-->
  <target name="targets">
    <echo message="usage: build [target]"/>
    <echo message=""/>
    <echo message="available targets:"/>
    <echo message="  targets              Shows this list of targets."/>
    <echo message="  dump-info            Dumps some information (VM-Version...)."/>
    <echo message="  clean                Deletes the classes directory."/>
    <echo message="  clean-all            Deletes all generated directories."/>

    <echo message="  prepare              Prepares the compilation. (Extracts the libs)"/>
    <echo message="  prepare-once         Prepares the compilation if needed. (Extracts the libs)"/>

    <echo message="  doc                  Generates the JavaDoc documentation."/>

    <echo message="  make                 Compiles the source code."/>
    <echo message="  make-plugin          Compiles the source code of the crawler plugin."/>
    <echo message="                       (and the regain project, if needed)"/>

    <echo message="  make-test            Compiles the test source code."/>
    <echo message="  test                 Does the JUnit tests."/>

    <echo message="  package              Packages the thumbnailer lib as standalone library." />
    <echo message="                       (including dependencies)"/>
    <echo message="  package-plugin       Packages the lib as regain plugin." />
    <echo message="                       (including depencies except those that exist in regain)"/>
    <echo message="  all                  Creates all."/>
  </target>


  <!--
   | Dump some information.
   +-->
  <target name="dump-info">
    <echo message="JAVA_HOME=${env.JAVA_HOME}" />
    <echo message="java.vm.info=${java.vm.info}" />
    <echo message="java.vm.name=${java.vm.name}" />
    <echo message="java.vm.vendor=${java.vm.vendor}" />
    <echo message="java.vm.version=${java.vm.version}" />
    <echo message="os.arch=${os.arch}" />
    <echo message="os.name=${os.name}" />
    <echo message="os.version=${os.version}" />
    <echo message="file.encoding=${file.encoding}" />
    <echo message="user.language=${user.language}" />
  </target>


  <!--
   | Deletes the classes directory.
   +-->
  <target name="clean">
    <delete dir="build/classes"/>
  </target>


  <!--
   | Deletes all generated directories (Without public and the deployed stuff).
   +-->
  <target name="clean-all" depends="clean">
    <delete dir="build/included-lib-classes"/>
    <delete dir="build/doc"/>
  </target>

  <!--
   | Prepares the compilation. (Extracts the libs)
   +-->
  <target name="prepare">
    <echo message="Extracting the lib jars ..." />
    <delete dir="build/included-lib-classes"/>
    <mkdir dir="build/included-lib-classes/common"/>
    <unjar dest="build/included-lib-classes/">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="lib/jodconverter3">
        <include name="*.jar"/>
      </fileset>
    </unjar>
    <unjar dest="build/included-lib-classes-shared/">
      <fileset dir="lib/shared-with-regain">
        <include name="*.jar"/>
      </fileset>
    </unjar>
  </target>


  <!--
   | Prepares the compilation. (Extracts the libs)
   | Does nothing if the libs were already extracted.
   +-->
  <target name="prepare-once" depends="-check-prepare, -prepare-if-needed"/>
  
  <target name="-check-prepare">
    <condition property="included-lib-classes.missing">
      <not>
        <available file="build/included-lib-classes" type="dir"/>
      </not>
    </condition>
  </target>
  
  <target name="-prepare-if-needed" if="included-lib-classes.missing">
    <antcall target="prepare"/>
  </target>


  <!--
   | Generates the JavaDoc documentation.
   +-->
  <target name="doc">
    <echo message="Generating JavaDoc documentation ..." />
    <delete dir="build/doc"/>
    <mkdir dir="build/doc/javadoc"/>
    <javadoc packagenames="*"
             sourcepathref="docpath"
             classpathref="classpath"
             destdir="build/doc/javadoc"
             doctitle="${doc.title}"
             windowtitle="${doc.title}"
             header="${doc.header}"
             bottom="${doc.bottom}"
             stylesheetfile="ressources/stylesheet.css"
             access="private"
             charset="UTF-8"
             failonerror="true">
             <!-- additionalparam="-breakiterator" -->
      <link offline="true"
            href="${java-api-location}"
            packagelistLoc="ressources/dummy-jdk-api-doc"/>
    </javadoc>
  </target>



  <!--
   | Compiles the source code.
   +-->
  <target name="make">
    <echo message="Compiling the source code using ${java.dir} ..." />
    <mkdir dir="build/classes"/>
    <!-- old javac[executable]: ${java.dir}/bin/ -->
    <javac destdir="build/classes"
           debug="${debug}"
           deprecation="true"
           executable="${java.dir}/bin/javac"
           source="1.5"
           target="1.5"
           fork="true"
           includeantruntime="false">
      <compilerarg value="-Xlint"/>
      <src>
        <path refid="sourcepath"/>
      </src>
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
      </classpath>
    </javac>
  </target>

  <target name="make-plugin" depends="make">
  	<echo message="Making sure everything is prepared at regain ..." />
  	<ant dir="${regain-location}" useNativeBasedir="true" inheritAll="false">
  		<target name="prepare-once"/>
  		<target name="make"/>
  	</ant>
  	<echo message="Compiling regain plugin ... (Regain is in ${regain-location})" />
  	<javac destdir="build/classes"
           debug="${debug}"
           deprecation="true"
           executable="${java.dir}/bin/javac"
           source="1.5"
           target="1.5"
           fork="true"
           includeantruntime="false">
      <compilerarg value="-Xlint"/>
      <src>
        <path refid="sourcepath-plugin"/>
      </src>
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
        <path refid="classpath-regain"/>
      </classpath>
    </javac>
  </target>

  <!--
   | Compiles the test source code.
   +-->
  <target name="make-test" depends="make">
    <echo message="Compiling the test source code ..." />
    <mkdir dir="build/classes"/>
    <javac destdir="build/classes"
           debug="${debug}"
           deprecation="true"
           target="1.5"
           includeantruntime="false">
      <src>
        <pathelement location="test/src"/>
      </src>
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
        <fileset dir="lib/ant">
          <include name="junit.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <!--
   | Package the thumbnailer as a standalone .jar-library/executable
   +-->
  <target name="package" depends="prepare-once, make">
    <echo message="Creating standalone jar ..." />
    <fileset id="ressources" dir="ressources">
    </fileset>
    <fileset id="lib-jars" dir="build/included-lib-classes">
    </fileset>
    <fileset id="lib-jars-shared" dir="build/included-lib-classes-shared">
    </fileset>
    <fileset id="classes" dir="build/classes">
      <exclude name="de/uni_siegen/wineme/come_in/thumbnailer/plugin/ThumbnailerPlugin*"/>
    </fileset>
    <jar jarfile="build/${programname.file}-standalone--${version.file}.jar"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="de.uni_siegen.wineme.come_in.thumbnailer.Main"/>
      </manifest>
      <fileset refid="lib-jars"/>
      <fileset refid="classes"/>
      <fileset refid="lib-jars-shared"/>
      <fileset refid="ressources" />
    </jar>
  </target>
  
  <!--
   | Packages the thumbnailer as a plugin for regain
   +-->
  <target name="package-plugin" depends="prepare-once, make-plugin">
    <echo message="Creating regain jar ..." />
    <fileset id="lib-jars" dir="build/included-lib-classes">
    </fileset>
    <fileset id="ressources" dir="ressources">
    </fileset>
    <fileset id="classes" dir="build/classes">
    </fileset>
    <jar jarfile="build/${programname.file}-plugin-${version.file}.jar"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="de.uni_siegen.wineme.come_in.thumbnailer.Main"/>
        <attribute name="Plugin-Class" value="de.uni_siegen.wineme.come_in.thumbnailer.plugin.ThumbnailerPlugin"/>
      </manifest>
      <fileset refid="lib-jars"/>
      <fileset refid="classes"/>
      <fileset refid="ressources" />
    </jar>
  </target>
  

  <!--
   | Does the JUnit tests.
   |
   | If this target does not work, copy the file "junit.jar" from the directory
   | "lib/ant" in your ANT_HOME/lib directory.
   | (ANT_HOME/lib is on my machine "/usr/share/ant/lib")
   +-->
  <target name="test" depends="make-test">
    <junit haltonfailure="false" fork="true" filtertrace="on" > <!-- showoutput="true" -->
      <classpath>
        <path refid="classpath"/>
        <path refid="classpath-shared"/>
        <fileset dir="lib">
          <include name="*.jar"/>
          <include name="ant/*.jar"/>
        </fileset>
      </classpath>
      <formatter type="plain" usefile="false"/>
      <batchtest>
        <fileset dir="test/src">
	  	  <include name="de/**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
   | Creates all.
   +-->
  <target name="all" depends="package, package-plugin">
  </target>

</project>
